class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    // Insert at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Insert at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Insert after a specific node
    public void insertAfter(int prevData, int data) {
        Node current = head;
        while (current != null && current.data != prevData) {
            current = current.next;
        }
        if (current != null) {
            Node newNode = new Node(data);
            newNode.next = current.next;
            current.next = newNode;
        } else {
            System.out.println("Node with data " + prevData + " not found.");
        }
    }

    // Print the list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        
        System.out.println("List after inserting at the end:");
        list.printList();
        
        list.insertAtBeginning(5);
        System.out.println("List after inserting at the beginning:");
        list.printList();
        
        list.insertAfter(20, 25);
        System.out.println("List after inserting 25 after 20:");
        list.printList();
        
        list.insertAfter(100, 200); // Trying to insert after a non-existent node
    }
}
